/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FailurePrediction } from "./FailurePrediction";
import { FailurePredictionCountArgs } from "./FailurePredictionCountArgs";
import { FailurePredictionFindManyArgs } from "./FailurePredictionFindManyArgs";
import { FailurePredictionFindUniqueArgs } from "./FailurePredictionFindUniqueArgs";
import { CreateFailurePredictionArgs } from "./CreateFailurePredictionArgs";
import { UpdateFailurePredictionArgs } from "./UpdateFailurePredictionArgs";
import { DeleteFailurePredictionArgs } from "./DeleteFailurePredictionArgs";
import { Implant } from "../../implant/base/Implant";
import { Patient } from "../../patient/base/Patient";
import { FailurePredictionService } from "../failurePrediction.service";
@graphql.Resolver(() => FailurePrediction)
export class FailurePredictionResolverBase {
  constructor(protected readonly service: FailurePredictionService) {}

  async _failurePredictionsMeta(
    @graphql.Args() args: FailurePredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FailurePrediction])
  async failurePredictions(
    @graphql.Args() args: FailurePredictionFindManyArgs
  ): Promise<FailurePrediction[]> {
    return this.service.failurePredictions(args);
  }

  @graphql.Query(() => FailurePrediction, { nullable: true })
  async failurePrediction(
    @graphql.Args() args: FailurePredictionFindUniqueArgs
  ): Promise<FailurePrediction | null> {
    const result = await this.service.failurePrediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FailurePrediction)
  async createFailurePrediction(
    @graphql.Args() args: CreateFailurePredictionArgs
  ): Promise<FailurePrediction> {
    return await this.service.createFailurePrediction({
      ...args,
      data: {
        ...args.data,

        implant: args.data.implant
          ? {
              connect: args.data.implant,
            }
          : undefined,

        patient: args.data.patient
          ? {
              connect: args.data.patient,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FailurePrediction)
  async updateFailurePrediction(
    @graphql.Args() args: UpdateFailurePredictionArgs
  ): Promise<FailurePrediction | null> {
    try {
      return await this.service.updateFailurePrediction({
        ...args,
        data: {
          ...args.data,

          implant: args.data.implant
            ? {
                connect: args.data.implant,
              }
            : undefined,

          patient: args.data.patient
            ? {
                connect: args.data.patient,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailurePrediction)
  async deleteFailurePrediction(
    @graphql.Args() args: DeleteFailurePredictionArgs
  ): Promise<FailurePrediction | null> {
    try {
      return await this.service.deleteFailurePrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Implant, {
    nullable: true,
    name: "implant",
  })
  async getImplant(
    @graphql.Parent() parent: FailurePrediction
  ): Promise<Implant | null> {
    const result = await this.service.getImplant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Patient, {
    nullable: true,
    name: "patient",
  })
  async getPatient(
    @graphql.Parent() parent: FailurePrediction
  ): Promise<Patient | null> {
    const result = await this.service.getPatient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
