/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Patient as PrismaPatient,
  FailurePrediction as PrismaFailurePrediction,
  Recommendation as PrismaRecommendation,
  Report as PrismaReport,
  Simulation as PrismaSimulation,
  Doctor as PrismaDoctor,
} from "@prisma/client";

export class PatientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PatientCountArgs, "select">): Promise<number> {
    return this.prisma.patient.count(args);
  }

  async patients(args: Prisma.PatientFindManyArgs): Promise<PrismaPatient[]> {
    return this.prisma.patient.findMany(args);
  }
  async patient(
    args: Prisma.PatientFindUniqueArgs
  ): Promise<PrismaPatient | null> {
    return this.prisma.patient.findUnique(args);
  }
  async createPatient(args: Prisma.PatientCreateArgs): Promise<PrismaPatient> {
    return this.prisma.patient.create(args);
  }
  async updatePatient(args: Prisma.PatientUpdateArgs): Promise<PrismaPatient> {
    return this.prisma.patient.update(args);
  }
  async deletePatient(args: Prisma.PatientDeleteArgs): Promise<PrismaPatient> {
    return this.prisma.patient.delete(args);
  }

  async findFailurePredictions(
    parentId: string,
    args: Prisma.FailurePredictionFindManyArgs
  ): Promise<PrismaFailurePrediction[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .failurePredictions(args);
  }

  async findRecommendations(
    parentId: string,
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recommendations(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findSimulations(
    parentId: string,
    args: Prisma.SimulationFindManyArgs
  ): Promise<PrismaSimulation[]> {
    return this.prisma.patient
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .simulations(args);
  }

  async getDoctor(parentId: string): Promise<PrismaDoctor | null> {
    return this.prisma.patient
      .findUnique({
        where: { id: parentId },
      })
      .doctor();
  }
}
