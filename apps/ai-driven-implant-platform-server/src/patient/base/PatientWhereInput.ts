/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { DoctorWhereUniqueInput } from "../../doctor/base/DoctorWhereUniqueInput";
import { FailurePredictionListRelationFilter } from "../../failurePrediction/base/FailurePredictionListRelationFilter";
import { EnumPatientGender } from "./EnumPatientGender";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { RecommendationListRelationFilter } from "../../recommendation/base/RecommendationListRelationFilter";
import { ReportListRelationFilter } from "../../report/base/ReportListRelationFilter";
import { SimulationListRelationFilter } from "../../simulation/base/SimulationListRelationFilter";

@InputType()
class PatientWhereInput {
  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  age?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DoctorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DoctorWhereUniqueInput)
  @IsOptional()
  @Field(() => DoctorWhereUniqueInput, {
    nullable: true,
  })
  doctor?: DoctorWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => FailurePredictionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FailurePredictionListRelationFilter)
  @IsOptional()
  @Field(() => FailurePredictionListRelationFilter, {
    nullable: true,
  })
  failurePredictions?: FailurePredictionListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumPatientGender,
  })
  @IsEnum(EnumPatientGender)
  @IsOptional()
  @Field(() => EnumPatientGender, {
    nullable: true,
  })
  gender?: "Option1";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RecommendationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RecommendationListRelationFilter)
  @IsOptional()
  @Field(() => RecommendationListRelationFilter, {
    nullable: true,
  })
  recommendations?: RecommendationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReportListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReportListRelationFilter)
  @IsOptional()
  @Field(() => ReportListRelationFilter, {
    nullable: true,
  })
  reports?: ReportListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SimulationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SimulationListRelationFilter)
  @IsOptional()
  @Field(() => SimulationListRelationFilter, {
    nullable: true,
  })
  simulations?: SimulationListRelationFilter;
}

export { PatientWhereInput as PatientWhereInput };
