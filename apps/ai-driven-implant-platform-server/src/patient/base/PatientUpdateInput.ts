/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  Min,
  Max,
  IsOptional,
  ValidateNested,
  IsEnum,
  IsString,
  MaxLength,
} from "class-validator";
import { DoctorWhereUniqueInput } from "../../doctor/base/DoctorWhereUniqueInput";
import { Type } from "class-transformer";
import { FailurePredictionUpdateManyWithoutPatientsInput } from "./FailurePredictionUpdateManyWithoutPatientsInput";
import { EnumPatientGender } from "./EnumPatientGender";
import { RecommendationUpdateManyWithoutPatientsInput } from "./RecommendationUpdateManyWithoutPatientsInput";
import { ReportUpdateManyWithoutPatientsInput } from "./ReportUpdateManyWithoutPatientsInput";
import { SimulationUpdateManyWithoutPatientsInput } from "./SimulationUpdateManyWithoutPatientsInput";

@InputType()
class PatientUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  age?: number | null;

  @ApiProperty({
    required: false,
    type: () => DoctorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DoctorWhereUniqueInput)
  @IsOptional()
  @Field(() => DoctorWhereUniqueInput, {
    nullable: true,
  })
  doctor?: DoctorWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => FailurePredictionUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => FailurePredictionUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => FailurePredictionUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  failurePredictions?: FailurePredictionUpdateManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    enum: EnumPatientGender,
  })
  @IsEnum(EnumPatientGender)
  @IsOptional()
  @Field(() => EnumPatientGender, {
    nullable: true,
  })
  gender?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => RecommendationUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => RecommendationUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => RecommendationUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  recommendations?: RecommendationUpdateManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    type: () => ReportUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => ReportUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => ReportUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  reports?: ReportUpdateManyWithoutPatientsInput;

  @ApiProperty({
    required: false,
    type: () => SimulationUpdateManyWithoutPatientsInput,
  })
  @ValidateNested()
  @Type(() => SimulationUpdateManyWithoutPatientsInput)
  @IsOptional()
  @Field(() => SimulationUpdateManyWithoutPatientsInput, {
    nullable: true,
  })
  simulations?: SimulationUpdateManyWithoutPatientsInput;
}

export { PatientUpdateInput as PatientUpdateInput };
