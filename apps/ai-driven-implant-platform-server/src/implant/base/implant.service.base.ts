/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Implant as PrismaImplant,
  FailurePrediction as PrismaFailurePrediction,
  Recommendation as PrismaRecommendation,
  Simulation as PrismaSimulation,
} from "@prisma/client";

export class ImplantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ImplantCountArgs, "select">): Promise<number> {
    return this.prisma.implant.count(args);
  }

  async implants(args: Prisma.ImplantFindManyArgs): Promise<PrismaImplant[]> {
    return this.prisma.implant.findMany(args);
  }
  async implant(
    args: Prisma.ImplantFindUniqueArgs
  ): Promise<PrismaImplant | null> {
    return this.prisma.implant.findUnique(args);
  }
  async createImplant(args: Prisma.ImplantCreateArgs): Promise<PrismaImplant> {
    return this.prisma.implant.create(args);
  }
  async updateImplant(args: Prisma.ImplantUpdateArgs): Promise<PrismaImplant> {
    return this.prisma.implant.update(args);
  }
  async deleteImplant(args: Prisma.ImplantDeleteArgs): Promise<PrismaImplant> {
    return this.prisma.implant.delete(args);
  }

  async findFailurePredictions(
    parentId: string,
    args: Prisma.FailurePredictionFindManyArgs
  ): Promise<PrismaFailurePrediction[]> {
    return this.prisma.implant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .failurePredictions(args);
  }

  async findRecommendations(
    parentId: string,
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.implant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recommendations(args);
  }

  async findSimulations(
    parentId: string,
    args: Prisma.SimulationFindManyArgs
  ): Promise<PrismaSimulation[]> {
    return this.prisma.implant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .simulations(args);
  }
}
