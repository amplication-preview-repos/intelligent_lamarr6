/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Implant } from "./Implant";
import { ImplantCountArgs } from "./ImplantCountArgs";
import { ImplantFindManyArgs } from "./ImplantFindManyArgs";
import { ImplantFindUniqueArgs } from "./ImplantFindUniqueArgs";
import { CreateImplantArgs } from "./CreateImplantArgs";
import { UpdateImplantArgs } from "./UpdateImplantArgs";
import { DeleteImplantArgs } from "./DeleteImplantArgs";
import { FailurePredictionFindManyArgs } from "../../failurePrediction/base/FailurePredictionFindManyArgs";
import { FailurePrediction } from "../../failurePrediction/base/FailurePrediction";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { SimulationFindManyArgs } from "../../simulation/base/SimulationFindManyArgs";
import { Simulation } from "../../simulation/base/Simulation";
import { ImplantService } from "../implant.service";
@graphql.Resolver(() => Implant)
export class ImplantResolverBase {
  constructor(protected readonly service: ImplantService) {}

  async _implantsMeta(
    @graphql.Args() args: ImplantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Implant])
  async implants(
    @graphql.Args() args: ImplantFindManyArgs
  ): Promise<Implant[]> {
    return this.service.implants(args);
  }

  @graphql.Query(() => Implant, { nullable: true })
  async implant(
    @graphql.Args() args: ImplantFindUniqueArgs
  ): Promise<Implant | null> {
    const result = await this.service.implant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Implant)
  async createImplant(
    @graphql.Args() args: CreateImplantArgs
  ): Promise<Implant> {
    return await this.service.createImplant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Implant)
  async updateImplant(
    @graphql.Args() args: UpdateImplantArgs
  ): Promise<Implant | null> {
    try {
      return await this.service.updateImplant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Implant)
  async deleteImplant(
    @graphql.Args() args: DeleteImplantArgs
  ): Promise<Implant | null> {
    try {
      return await this.service.deleteImplant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FailurePrediction], {
    name: "failurePredictions",
  })
  async findFailurePredictions(
    @graphql.Parent() parent: Implant,
    @graphql.Args() args: FailurePredictionFindManyArgs
  ): Promise<FailurePrediction[]> {
    const results = await this.service.findFailurePredictions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Recommendation], { name: "recommendations" })
  async findRecommendations(
    @graphql.Parent() parent: Implant,
    @graphql.Args() args: RecommendationFindManyArgs
  ): Promise<Recommendation[]> {
    const results = await this.service.findRecommendations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Simulation], { name: "simulations" })
  async findSimulations(
    @graphql.Parent() parent: Implant,
    @graphql.Args() args: SimulationFindManyArgs
  ): Promise<Simulation[]> {
    const results = await this.service.findSimulations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
