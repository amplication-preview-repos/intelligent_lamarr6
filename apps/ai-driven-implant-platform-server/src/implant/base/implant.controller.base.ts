/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImplantService } from "../implant.service";
import { ImplantCreateInput } from "./ImplantCreateInput";
import { Implant } from "./Implant";
import { ImplantFindManyArgs } from "./ImplantFindManyArgs";
import { ImplantWhereUniqueInput } from "./ImplantWhereUniqueInput";
import { ImplantUpdateInput } from "./ImplantUpdateInput";
import { FailurePredictionFindManyArgs } from "../../failurePrediction/base/FailurePredictionFindManyArgs";
import { FailurePrediction } from "../../failurePrediction/base/FailurePrediction";
import { FailurePredictionWhereUniqueInput } from "../../failurePrediction/base/FailurePredictionWhereUniqueInput";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { RecommendationWhereUniqueInput } from "../../recommendation/base/RecommendationWhereUniqueInput";
import { SimulationFindManyArgs } from "../../simulation/base/SimulationFindManyArgs";
import { Simulation } from "../../simulation/base/Simulation";
import { SimulationWhereUniqueInput } from "../../simulation/base/SimulationWhereUniqueInput";

export class ImplantControllerBase {
  constructor(protected readonly service: ImplantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Implant })
  async createImplant(
    @common.Body() data: ImplantCreateInput
  ): Promise<Implant> {
    return await this.service.createImplant({
      data: data,
      select: {
        createdAt: true,
        id: true,
        manufacturer: true,
        name: true,
        specifications: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Implant] })
  @ApiNestedQuery(ImplantFindManyArgs)
  async implants(@common.Req() request: Request): Promise<Implant[]> {
    const args = plainToClass(ImplantFindManyArgs, request.query);
    return this.service.implants({
      ...args,
      select: {
        createdAt: true,
        id: true,
        manufacturer: true,
        name: true,
        specifications: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Implant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async implant(
    @common.Param() params: ImplantWhereUniqueInput
  ): Promise<Implant | null> {
    const result = await this.service.implant({
      where: params,
      select: {
        createdAt: true,
        id: true,
        manufacturer: true,
        name: true,
        specifications: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Implant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImplant(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() data: ImplantUpdateInput
  ): Promise<Implant | null> {
    try {
      return await this.service.updateImplant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          manufacturer: true,
          name: true,
          specifications: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Implant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImplant(
    @common.Param() params: ImplantWhereUniqueInput
  ): Promise<Implant | null> {
    try {
      return await this.service.deleteImplant({
        where: params,
        select: {
          createdAt: true,
          id: true,
          manufacturer: true,
          name: true,
          specifications: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/failurePredictions")
  @ApiNestedQuery(FailurePredictionFindManyArgs)
  async findFailurePredictions(
    @common.Req() request: Request,
    @common.Param() params: ImplantWhereUniqueInput
  ): Promise<FailurePrediction[]> {
    const query = plainToClass(FailurePredictionFindManyArgs, request.query);
    const results = await this.service.findFailurePredictions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        implant: {
          select: {
            id: true,
          },
        },

        patient: {
          select: {
            id: true,
          },
        },

        prediction: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/failurePredictions")
  async connectFailurePredictions(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: FailurePredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failurePredictions: {
        connect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/failurePredictions")
  async updateFailurePredictions(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: FailurePredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failurePredictions: {
        set: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/failurePredictions")
  async disconnectFailurePredictions(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: FailurePredictionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failurePredictions: {
        disconnect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/recommendations")
  @ApiNestedQuery(RecommendationFindManyArgs)
  async findRecommendations(
    @common.Req() request: Request,
    @common.Param() params: ImplantWhereUniqueInput
  ): Promise<Recommendation[]> {
    const query = plainToClass(RecommendationFindManyArgs, request.query);
    const results = await this.service.findRecommendations(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        implant: {
          select: {
            id: true,
          },
        },

        patient: {
          select: {
            id: true,
          },
        },

        reason: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recommendations")
  async connectRecommendations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        connect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recommendations")
  async updateRecommendations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        set: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recommendations")
  async disconnectRecommendations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        disconnect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/simulations")
  @ApiNestedQuery(SimulationFindManyArgs)
  async findSimulations(
    @common.Req() request: Request,
    @common.Param() params: ImplantWhereUniqueInput
  ): Promise<Simulation[]> {
    const query = plainToClass(SimulationFindManyArgs, request.query);
    const results = await this.service.findSimulations(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        implant: {
          select: {
            id: true,
          },
        },

        notes: true,

        patient: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/simulations")
  async connectSimulations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: SimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simulations: {
        connect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/simulations")
  async updateSimulations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: SimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simulations: {
        set: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/simulations")
  async disconnectSimulations(
    @common.Param() params: ImplantWhereUniqueInput,
    @common.Body() body: SimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      simulations: {
        disconnect: body,
      },
    };
    await this.service.updateImplant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
