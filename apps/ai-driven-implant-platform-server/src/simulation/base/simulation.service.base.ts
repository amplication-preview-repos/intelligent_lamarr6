/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Simulation as PrismaSimulation,
  Implant as PrismaImplant,
  Patient as PrismaPatient,
} from "@prisma/client";

export class SimulationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SimulationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.simulation.count(args);
  }

  async simulations(
    args: Prisma.SimulationFindManyArgs
  ): Promise<PrismaSimulation[]> {
    return this.prisma.simulation.findMany(args);
  }
  async simulation(
    args: Prisma.SimulationFindUniqueArgs
  ): Promise<PrismaSimulation | null> {
    return this.prisma.simulation.findUnique(args);
  }
  async createSimulation(
    args: Prisma.SimulationCreateArgs
  ): Promise<PrismaSimulation> {
    return this.prisma.simulation.create(args);
  }
  async updateSimulation(
    args: Prisma.SimulationUpdateArgs
  ): Promise<PrismaSimulation> {
    return this.prisma.simulation.update(args);
  }
  async deleteSimulation(
    args: Prisma.SimulationDeleteArgs
  ): Promise<PrismaSimulation> {
    return this.prisma.simulation.delete(args);
  }

  async getImplant(parentId: string): Promise<PrismaImplant | null> {
    return this.prisma.simulation
      .findUnique({
        where: { id: parentId },
      })
      .implant();
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.simulation
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
}
